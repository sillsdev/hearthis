<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<PropertyGroup>
		<RootDir Condition="'$(teamcity_version)' == ''">$(MSBuildProjectDirectory)\..</RootDir>
		<RootDir Condition="'$(teamcity_version)' != ''">$(teamcity_build_checkoutDir)</RootDir>
		<BUILD_NUMBER Condition="'$(BUILD_NUMBER)'==''">0.0.0</BUILD_NUMBER>
		<SILBuildTasksDLL>$(RootDir)/packages/SIL.BuildTasks/tools/SIL.BuildTasks.dll</SILBuildTasksDLL>
		<SILReleaseTasksProps>$(RootDir)/packages/SIL.ReleaseTasks/build/SIL.ReleaseTasks.props</SILReleaseTasksProps>
		<RestartBuild Condition="!Exists('$(SILBuildTasksDLL)') Or !Exists('$(SILReleaseTasksProps)') Or !Exists('$(RootDir)/packages/NUnit.ConsoleRunner/tools/nunit3-console.exe')">true</RestartBuild>
		<RestartBuild Condition="Exists('$(SILBuildTasksDLL)') And Exists('$(SILReleaseTasksProps)') And Exists('$(RootDir)/packages/NUnit.ConsoleRunner/tools/nunit3-console.exe')">false</RestartBuild>
		<Solution>HearThis.sln</Solution>
		<ApplicationName>HearThis</ApplicationName>
		<Configuration Condition="'$(Configuration)' == ''">Release</Configuration>
		<Platform>x64</Platform>
	</PropertyGroup>

	<Import Project="../.nuget/NuGet.targets" />

	<Target Name="RestoreLocalPackages" DependsOnTargets="CheckPrerequisites">
		<Message Text="RestartBuild=$(RestartBuild)"/>
		<Exec Command='$(NuGetCommand) install SIL.BuildTasks -excludeVersion -PreRelease -source "$(PackageSources)" -solutionDirectory "$(SolutionDir)."' />
		<Exec Command='$(NuGetCommand) install SIL.ReleaseTasks -excludeVersion -PreRelease -source "$(PackageSources)" -solutionDirectory "$(SolutionDir)."' />
		<Exec Command='$(NuGetCommand) install NUnit.ConsoleRunner -excludeVersion -source "$(PackageSources)" -solutionDirectory "$(SolutionDir)."' />
		<Exec Command='$(NuGetCommand) install NUnit.Extension.TeamCityEventListener -excludeVersion -source "$(PackageSources)" -solutionDirectory "$(SolutionDir)."' />
		<Exec Command='$(NuGetCommand) install SIL.libpalaso.l10ns -excludeVersion -Version 15.0.0 -source "$(PackageSources)" -solutionDirectory "$(SolutionDir)."' />
		<MSBuild Projects="$(MSBuildProjectFullPath)" Targets="BuildInternal"
			Properties="Configuration=$(Configuration)" Condition="$(RestartBuild)" />
	</Target>
	
	<Import Project="$(SILReleaseTasksProps)" Condition="Exists('$(SILReleaseTasksProps)')" />

	<UsingTask TaskName="MakeWixForDirTree" AssemblyFile="$(SILBuildTasksDLL)"
		Condition="Exists('$(SILBuildTasksDLL)')" />
	<UsingTask TaskName="Split" AssemblyFile="$(SILBuildTasksDLL)"
		Condition="Exists('$(SILBuildTasksDLL)')" />
	<UsingTask TaskName="FileUpdate" AssemblyFile="$(SILBuildTasksDLL)"
		Condition="Exists('$(SILBuildTasksDLL)')" />
	<UsingTask TaskName="NUnit3" AssemblyFile="$(SILBuildTasksDLL)"
		Condition="Exists('$(SILBuildTasksDLL)')" />

	<Target Name="VersionNumbers">
		<Message Text="BUILD_NUMBER: $(BUILD_NUMBER)" Importance="high"/>

		<Split Input="$(BUILD_NUMBER)" Delimiter="." OutputSubString="2">
		<Output TaskParameter="ReturnValue" PropertyName="BuildCounter" />
		</Split>

		<Message Text="BuildCounter: $(BuildCounter)" Importance="high"/>

		<!-- Note, after some thought, we've decided this is the best place to keep the version number (not on TeamCity, not in the assemblies).     -->
		<!-- When updating strings in crowdin, the version number in l10n.proj should also be set to match the current version number.     -->
		<PropertyGroup>
			<Version>3.5.$(BuildCounter)</Version>
		</PropertyGroup>

		<Message Text="Version: $(Version)" Importance="high"/>
	</Target>

	<Target Name="SetAssemblyVersion" DependsOnTargets="VersionNumbers">
		<Message Text="Updating version in csproj files" Importance="high"/>
		<FileUpdate File="$(RootDir)\src\HearThis\HearThis.csproj"
			Regex='&lt;Version&gt;0\.0\.0\.0&lt;/Version&gt;'
			ReplacementText="&lt;Version&gt;$(Version)&lt;/Version&gt;" />
		<FileUpdate File="$(RootDir)\src\HearThisTests\HearThisTests.csproj"
			Regex='&lt;Version&gt;0\.0\.0\.0&lt;/Version&gt;'
			ReplacementText="&lt;Version&gt;$(Version)&lt;/Version&gt;" />
	</Target>

	<Target Name="Build">
		<CallTarget Targets="RestoreLocalPackages"/>
		<CallTarget Targets="BuildInternal" Condition="!$(RestartBuild)" />
	</Target>

	<Target Name="BuildInternal" DependsOnTargets="NuGetRestore; SetAssemblyVersion">
		<MSBuild
			Projects="$(RootDir)\$(Solution)"
			Targets="Rebuild"
			Properties="Configuration=$(Configuration)" />
		<Message Text="Build Complete"/>
	</Target>
	
	<Target Name="NuGetRestore" DependsOnTargets="SetAssemblyVersion">
		<Message Text="Restoring NuGet Packages for HearThis" Importance="high"/>

		<!-- Do not combine this with BuildInternal; restore cannot be used with another build target. -->
		<MSBuild
			Projects="$(RootDir)\$(Solution)"
			Targets="Restore" />
	</Target>

	<Target Name="Test" DependsOnTargets ="Build">
		<CreateItem Include="$(RootDir)/output/$(Configuration)/*Tests.dll" Exclude="$(RootDir)\output\$(Configuration)\SIL.DblBundle.Tests.dll">
			<Output ItemName="TestAssemblies" TaskParameter="Include" />
		</CreateItem>
		<NUnit3 Condition="'$(teamcity_version)' == ''"
			Assemblies="@(TestAssemblies)"
			ToolPath="$(RootDir)/packages/NUnit.ConsoleRunner/tools"
			ExcludeCategory="$(excludedCategories)"
			WorkingDirectory="$(RootDir)/output/$(Configuration)"
			Verbose="true"
			OutputXmlFile="$(RootDir)/output/$(Configuration)/TestResults.xml"
      UseNUnit3Xml = "true"
			TeamCity="false"/>
		<NUnit3 Condition="'$(teamcity_version)' != ''"
			Assemblies="@(TestAssemblies)"
			ToolPath="$(RootDir)/packages/NUnit.ConsoleRunner/tools"
			ExcludeCategory="SkipOnTeamCity,$(excludedCategories)"
			WorkingDirectory="$(RootDir)/output/$(Configuration)"
			Verbose="true"
			TeamCity="true"/>
	</Target>
	
	<Target Name="copyLibL10ns" DependsOnTargets="RestoreLocalPackages">
		<Error Text="Palaso L10ns package missing. Expected at $(RootDir)/packages/SIL.libpalaso.l10ns" Condition="!Exists('$(RootDir)/packages/SIL.libpalaso.l10ns/SIL.libpalaso.l10ns.nupkg')" />
		<ItemGroup>
			<XliffFiles Include="$(RootDir)/packages/SIL.libpalaso.l10ns/content/**/*.xlf"/>
		</ItemGroup>
		  <Copy SourceFiles="@(XliffFiles)"
				DestinationFiles="@(XliffFiles->'$(RootDir)/DistFiles/localization/%(Filename)%(Extension)')"
				SkipUnchangedFiles="true"/>
	</Target>
	
	<Target Name="ConvertReleaseNotesToHtml">
		<FileUpdate
			File="$(RootDir)/DistFiles/ReleaseNotes.md"
			DatePlaceHolder='_DATE_'
			DateFormat='MMMM yyyy'
			Regex='_VERSION_'
			ReplacementText="$(Version)" />
			
		<CreateReleaseNotesHtml ChangelogFile="$(RootDir)/DistFiles/ReleaseNotes.md"
			HtmlFile="$(RootDir)/output/ReleaseNotes.htm" />
	</Target>
	
	<Target Name="MakeDownloadPointers" DependsOnTargets="VersionNumbers" >

		<!-- copy various templates so we aren't modifying the originals
		(modified originals are a pain on dev machines ) -->

		<!-- For use on software.sil.org download page -->
		<Copy SourceFiles ="$(RootDir)\src\Installer\template.download_info"
		   DestinationFiles ="$(RootDir)\output\Installer\HearThisInstaller.$(Version).download_info"/>
		<Copy SourceFiles ="$(RootDir)\src\template.releasenotes.download_info"
			DestinationFiles ="$(RootDir)\output\releasenotes.download_info"/>

		<!-- appcast.xml is used as part of the update notification system -->
		<!-- This file is an artifact on TeamCity - it does not get rsync'd to software.sil.org. -->
		<Copy SourceFiles ="$(RootDir)\src\Installer\appcast.xml"
			DestinationFolder ="$(RootDir)\output\installer"/>

		<!-- replace some parts of the file with the version number & date -->

		<!--<FileUpdate File="$(RootDir)\output\Installer\DownloadPointers.htm"
				 DatePlaceholder='DEV_RELEASE_DATE'
				Regex='DEV_VERSION_NUMBER'
				 ReplacementText ="$(Version)" />-->

		<FileUpdate File="$(RootDir)\output\Installer\HearThisInstaller.$(Version).download_info"
			DatePlaceHolder='_DATE_'
			DateFormat='yyyy-MM-dd'
			Regex='_VERSION_'
			ReplacementText ="$(Version)" />
		<FileUpdate File="$(RootDir)\output\Installer\HearThisInstaller.$(Version).download_info"
			Regex='_BUILD'
			ReplacementText ="$(BUILD_NUMBER)" />
			
		<FileUpdate File="$(RootDir)\output\releasenotes.download_info"
			DatePlaceHolder='_DATE_'
			DateFormat='yyyy-MM-dd'
			Regex='_VERSION_'
			ReplacementText ="$(Version)" />
		<!-- Unlikely we'll ever need or care about this: -->	
		<FileUpdate File="$(RootDir)\output\releasenotes.download_info"
			Regex='_BUILD'
			ReplacementText ="$(BUILD_NUMBER)" />

		<FileUpdate File="$(RootDir)\output\installer\appcast.xml"
				   DatePlaceholder='DEV_RELEASE_DATE'
				  Regex='DEV_VERSION_NUMBER'
				   ReplacementText ="$(Version)" />
	</Target>

	<!-- When building on TeamCity, use one of these targets to build a signed Installer. Pick the appropriate one depending on whether your project's output MUST be signed or it's only nice if it is. For example, a continuous build might use SignIfPossible, while a Publication build must use SignInstaller.-->
	<Target Name="SignInstaller" DependsOnTargets="VersionNumbers; Installer">
		<PropertyGroup>
			<SignOutput>true</SignOutput>
			<IgnoreSigningErrors>false</IgnoreSigningErrors>
		</PropertyGroup>
	</Target>

	<Target Name="SignIfPossible" DependsOnTargets="VersionNumbers; Installer">
		<PropertyGroup>
			<SignOutput>true</SignOutput>
			<IgnoreSigningErrors>true</IgnoreSigningErrors>
		</PropertyGroup>
	</Target>

	<Target Name="Installer" DependsOnTargets="VersionNumbers; MakeWixForDistFiles; Build ">

		<!-- set the version number in the installer configuration program.  Perhaps there's a way to just send in the variables rather than this brute-force changing of the script, but I haven't figured that out. -->

		<FileUpdate File="$(RootDir)\src\Installer\Installer.wxs"
			Regex='Property_ProductVersion = ".*"'
			ReplacementText="Property_ProductVersion = &quot;$(Version)&quot;" />
		<FileUpdate File="$(RootDir)\src\Installer\Bootstrapper\HearThis Bootstrap Installer.wxs"
			Regex='Property_ProductVersion = ".*"'
			ReplacementText="Property_ProductVersion = &quot;$(Version)&quot;" />

		<Message Text="Making Installer Version: $(Version)" Importance="high"  />

		<MSBuild
			Projects="$(RootDir)\src\Installer\Installer.sln"
			Targets="Rebuild"
			Properties="Configuration=$(Configuration)" />
		<Message Text="Build Complete"/>

		<PropertyGroup>
			<InstallerPathWithVersion>$(RootDir)\output\installer\HearThisInstaller-$(Version).exe</InstallerPathWithVersion>
		</PropertyGroup>
	
		<!-- remove an existing one with the same name, if necessary -->
		<Delete Files="$(InstallerPathWithVersion)" TreatErrorsAsWarnings="false" />

		<Copy SourceFiles="$(RootDir)\output\installer\HearThisInstaller.exe"
			DestinationFiles="$(InstallerPathWithVersion)"/>

		<!-- remove the installer which has no version number (wouldn't need this if the copy above was a move, instead) -->
		<Delete Files="$(RootDir)\output\installer\HearThisInstaller.exe" TreatErrorsAsWarnings="false" />

	</Target>

	<Target Name="MakeWixForDistFiles" DependsOnTargets="copyLibL10ns">
		<MakeDir Directories ="$(RootDir)\output\installer" ContinueOnError ="true"/>

		<MakeWixForDirTree
			DirectoryReferenceId="ProgramDir"
			ComponentGroupId="DistFiles"
			RootDirectory="$(RootDir)\DistFiles"
			OutputFilePath="$(RootDir)\output\Installer\GeneratedDistFiles.wxs"
			MatchRegExPattern=".*">
				<!--what does this do?-->
				<Output TaskParameter="OutputFilePath" ItemName="Compile" />
		</MakeWixForDirTree>
	</Target>
</Project>
